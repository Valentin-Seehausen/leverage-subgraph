// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Position", id.toString(), this);
    }
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trader(): string {
    let value = this.get("trader");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get isOpen(): boolean {
    let value = this.get("isOpen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isOpen(value: boolean) {
    this.set("isOpen", Value.fromBoolean(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get leverage(): BigInt {
    let value = this.get("leverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set leverage(value: BigInt) {
    this.set("leverage", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get entryPrice(): BigInt {
    let value = this.get("entryPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set entryPrice(value: BigInt) {
    this.set("entryPrice", Value.fromBigInt(value));
  }

  get liquidationPrice(): BigInt {
    let value = this.get("liquidationPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidationPrice(value: BigInt) {
    this.set("liquidationPrice", Value.fromBigInt(value));
  }

  get takeProfitPrice(): BigInt {
    let value = this.get("takeProfitPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set takeProfitPrice(value: BigInt) {
    this.set("takeProfitPrice", Value.fromBigInt(value));
  }

  get minClosePrice(): BigInt {
    let value = this.get("minClosePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minClosePrice(value: BigInt) {
    this.set("minClosePrice", Value.fromBigInt(value));
  }

  get maxClosePrice(): BigInt {
    let value = this.get("maxClosePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxClosePrice(value: BigInt) {
    this.set("maxClosePrice", Value.fromBigInt(value));
  }

  get closePrice(): BigInt | null {
    let value = this.get("closePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closePrice(value: BigInt | null) {
    if (!value) {
      this.unset("closePrice");
    } else {
      this.set("closePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get openDate(): BigInt {
    let value = this.get("openDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openDate(value: BigInt) {
    this.set("openDate", Value.fromBigInt(value));
  }

  get openTransactionHash(): Bytes {
    let value = this.get("openTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set openTransactionHash(value: Bytes) {
    this.set("openTransactionHash", Value.fromBytes(value));
  }

  get closeDate(): BigInt | null {
    let value = this.get("closeDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeDate(value: BigInt | null) {
    if (!value) {
      this.unset("closeDate");
    } else {
      this.set("closeDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get closeTransactionHash(): Bytes | null {
    let value = this.get("closeTransactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set closeTransactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("closeTransactionHash");
    } else {
      this.set("closeTransactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get pnlAssets(): BigInt | null {
    let value = this.get("pnlAssets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pnlAssets(value: BigInt | null) {
    if (!value) {
      this.unset("pnlAssets");
    } else {
      this.set("pnlAssets", Value.fromBigInt(<BigInt>value));
    }
  }

  get pnlAssetsPercentage(): BigDecimal | null {
    let value = this.get("pnlAssetsPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set pnlAssetsPercentage(value: BigDecimal | null) {
    if (!value) {
      this.unset("pnlAssetsPercentage");
    } else {
      this.set("pnlAssetsPercentage", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get pnlShares(): BigInt | null {
    let value = this.get("pnlShares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pnlShares(value: BigInt | null) {
    if (!value) {
      this.unset("pnlShares");
    } else {
      this.set("pnlShares", Value.fromBigInt(<BigInt>value));
    }
  }

  get pnlSharesPercentage(): BigDecimal | null {
    let value = this.get("pnlSharesPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set pnlSharesPercentage(value: BigDecimal | null) {
    if (!value) {
      this.unset("pnlSharesPercentage");
    } else {
      this.set("pnlSharesPercentage", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Trader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trader must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Trader", id.toString(), this);
    }
  }

  static load(id: string): Trader | null {
    return changetype<Trader | null>(store.get("Trader", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }
}

export class TradePair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradePair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradePair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradePair", id.toString(), this);
    }
  }

  static load(id: string): TradePair | null {
    return changetype<TradePair | null>(store.get("TradePair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get longCollateral(): BigInt {
    let value = this.get("longCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set longCollateral(value: BigInt) {
    this.set("longCollateral", Value.fromBigInt(value));
  }

  get shortCollateral(): BigInt {
    let value = this.get("shortCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shortCollateral(value: BigInt) {
    this.set("shortCollateral", Value.fromBigInt(value));
  }

  get longShares(): BigInt {
    let value = this.get("longShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set longShares(value: BigInt) {
    this.set("longShares", Value.fromBigInt(value));
  }

  get shortShares(): BigInt {
    let value = this.get("shortShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shortShares(value: BigInt) {
    this.set("shortShares", Value.fromBigInt(value));
  }

  get longPositionCount(): BigInt {
    let value = this.get("longPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set longPositionCount(value: BigInt) {
    this.set("longPositionCount", Value.fromBigInt(value));
  }

  get shortPositionCount(): BigInt {
    let value = this.get("shortPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shortPositionCount(value: BigInt) {
    this.set("shortPositionCount", Value.fromBigInt(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }

  get liquidityPool(): string | null {
    let value = this.get("liquidityPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidityPool(value: string | null) {
    if (!value) {
      this.unset("liquidityPool");
    } else {
      this.set("liquidityPool", Value.fromString(<string>value));
    }
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }
}

export class LiquidityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityPool", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPool | null {
    return changetype<LiquidityPool | null>(store.get("LiquidityPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get openInterestShares(): BigInt {
    let value = this.get("openInterestShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openInterestShares(value: BigInt) {
    this.set("openInterestShares", Value.fromBigInt(value));
  }

  get assets(): BigInt {
    let value = this.get("assets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assets(value: BigInt) {
    this.set("assets", Value.fromBigInt(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }
}
